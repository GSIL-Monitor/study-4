原子性：
	原子性是指一个操作是不可中断的，及时是在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程干扰
	i++; 就不是原子性
有序性：
	程序执行顺序不一定就是代码顺序，
	一条指令可以分为很多步骤
		指令为使得工作更加顺畅进行指令重排
		指令重排不能破坏串行
	
可见性：
	可见性是指当一个线程修改了某一个共享遍历的值，其他线程是否能够立即知道这个修改
	
	
Happen-Before:
	程序顺序原则：一个线程内保证语义的串行性
	volatile规则：volatile变量的写，先发生于读，这保证了volatile变量的可见性
	锁规则：解锁必然发生在随后的加锁前
	传递性：A先于B，B先于C，那么A必然先于C
	线程的start()方法先于它的每一个动作
	线程的所有操作先于线程的终结(Thread.join())
	线程的中断（interrupt()）先于被中断线程的代码
	对象的构造函数执行结束先于finalize()方法
	
线程安全的概念：
	指某个函数。函数库在多线程环境中被调用，能够正确的处理各个线程的局部变量，使程序功能正确的完成
	
	
	
	
	
	
	
	