为啥需要并行
	业务要求和**性能**
	
	同步（synchronous）和异步（asynchronous）
	并发（concurrency）和并行（parallelism）
	临界区
	阻塞（blocking）和非阻塞（Non-Blocking）
	死锁（Deadlock），饥饿（Starvation），活锁（Livelock）
	并行的级别
	
	
1.同步（synchronous）和异步（asynchronous）
	
			 同步		 异步			同步
			|----|		|---|			|---|
			|	 v 	    |	|			|	v
	------------------------|----------------------------->时间
							|----|
					立即返回|	 | 后台异步操作
							v	 v
	----------------------------------------------------->时间
	
2.并发（concurrency）和并行（parallelism）
	
	|					|		|				|
	|--------1--------->|		|				|
	|--------2--------->|		| 1   2   1   3	|
	|--------3--------->|		|--->--->--->-->|
	|--------4--------->|		|				|
	|					|		|				|
	|					|		|				|
			并行					 并发
	
3.临界区
		临界区用来表示一种公共资源或者说是共享数据，可以被多个
	线程使用。但是每一次，只能有一个线程使用它，一旦临界区资源
	被占用，其他线程要想使用这个资源，就必须等待。
	
	|-------------|
	|	进程	  |
	|-------------|
		   |
	       v
	|-------------|
	|	进入区    |------->资源被占用，暂时不能访问，进入阻塞等待队列
	| （申请资源）|
	|-------------|
		   |
		   v
	|-------------|
	|	 临界区   |
	|-------------|
		   |
		   v
	|-------------|
	|	 退出区   |
	|-------------|
	
4.阻塞（blocking）和非阻塞（Non-Blocking）
	
	阻塞和非阻塞通常用来形容多线程间的相互影响。比如一个线程占用了临界区资源，那么其它所有需要
这个资源的线程就必须在这个临界区中进行等待，等待会导致线程挂起。这种情况就是阻塞。此时，如
果占用资源的线程一直不愿意释放资源，那么其它所有阻塞在这个临界区上的线程都不能工作。
	非阻塞允许多个线程同时进入临界区
	
	
5.死锁（Deadlock），饥饿（Starvation），活锁（Livelock）
	
	饥饿是指某一个或多个线程因为种种原因无法获得
	所需要的资源，导致一直无法执行。（比如优先级较低，一直获取不到资源）
	
	死锁：线程需要的资源被其他线程占用，其他线程需要的资源被另外的线程占用，形成闭环。 程序静止
	活锁：A线程需要C资源被占用，释放D资源,拿取C资源。同时另一个B线程需要的D资源被占用，释放C资源，拿取了D资源。 程序运行
	
6.并发的级别

阻塞：当一个线程进入临界区，其他线程必须等待。
	
非阻塞 
	无障碍 ： 是一种最弱的非阻塞调度
			自由出入临界区
			无竞争时，有限步内完成操作
			有竞争时，回滚数据
	无锁：
			无障碍的
			保证有一个线程可以胜出
	无等待
		无锁的
		要求所有的线程必须在有限步完成
		无饥饿的
	
	
	
有关并行的定律
	Amdahl定律
	Gustafson定律
	
	
	
	
	
	
	
	